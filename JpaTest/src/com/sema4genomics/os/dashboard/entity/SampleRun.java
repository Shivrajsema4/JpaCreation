package com.sema4genomics.os.dashboard.entity;
// Generated 1 Sep, 2017 12:41:39 PM by Hibernate Tools 5.2.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * SampleRun generated by hbm2java
 */
@Entity
@Table(name = "sample_run", catalog = "osdashboard")
public class SampleRun implements java.io.Serializable {

	private int id;
	private FileRef fileRefByTbiIndexFileId;
	private FileRef fileRefByVcfFileId;
	private FileRef fileRefByBamFileId;
	private Run run;
	private Sample sample;
	private User user;
	private String barcode;
	private Boolean isRerun;
	private Integer mappedReads;
	private Float meanDepth;
	private Float onTarget;
	private Float uniformity;
	private Integer altAlleles;
	private Integer polymorphicAltAlleles;
	private String qcStatus;
	private String sampleQcUrl;
	private String sampleVariantsUrl;
	private Date created;
	private Date lastModified;
	private Set<SampleRunLog> sampleRunLogs = new HashSet<SampleRunLog>(0);
	private Set<BenchAnalysis> benchAnalysises = new HashSet<BenchAnalysis>(0);
	private Set<SampleRunResult> sampleRunResults = new HashSet<SampleRunResult>(0);
	private Set<SampleRunVariants> sampleRunVariantses = new HashSet<SampleRunVariants>(0);

	public SampleRun() {
	}

	public SampleRun(int id, FileRef fileRefByTbiIndexFileId, FileRef fileRefByVcfFileId, FileRef fileRefByBamFileId,
			Run run, Sample sample, User user) {
		this.id = id;
		this.fileRefByTbiIndexFileId = fileRefByTbiIndexFileId;
		this.fileRefByVcfFileId = fileRefByVcfFileId;
		this.fileRefByBamFileId = fileRefByBamFileId;
		this.run = run;
		this.sample = sample;
		this.user = user;
	}

	public SampleRun(int id, FileRef fileRefByTbiIndexFileId, FileRef fileRefByVcfFileId, FileRef fileRefByBamFileId,
			Run run, Sample sample, User user, String barcode, Boolean isRerun, Integer mappedReads, Float meanDepth,
			Float onTarget, Float uniformity, Integer altAlleles, Integer polymorphicAltAlleles, String qcStatus,
			String sampleQcUrl, String sampleVariantsUrl, Date created, Date lastModified,
			Set<SampleRunLog> sampleRunLogs, Set<BenchAnalysis> benchAnalysises, Set<SampleRunResult> sampleRunResults,
			Set<SampleRunVariants> sampleRunVariantses) {
		this.id = id;
		this.fileRefByTbiIndexFileId = fileRefByTbiIndexFileId;
		this.fileRefByVcfFileId = fileRefByVcfFileId;
		this.fileRefByBamFileId = fileRefByBamFileId;
		this.run = run;
		this.sample = sample;
		this.user = user;
		this.barcode = barcode;
		this.isRerun = isRerun;
		this.mappedReads = mappedReads;
		this.meanDepth = meanDepth;
		this.onTarget = onTarget;
		this.uniformity = uniformity;
		this.altAlleles = altAlleles;
		this.polymorphicAltAlleles = polymorphicAltAlleles;
		this.qcStatus = qcStatus;
		this.sampleQcUrl = sampleQcUrl;
		this.sampleVariantsUrl = sampleVariantsUrl;
		this.created = created;
		this.lastModified = lastModified;
		this.sampleRunLogs = sampleRunLogs;
		this.benchAnalysises = benchAnalysises;
		this.sampleRunResults = sampleRunResults;
		this.sampleRunVariantses = sampleRunVariantses;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tbi_index_file_id", nullable = false)
	public FileRef getFileRefByTbiIndexFileId() {
		return this.fileRefByTbiIndexFileId;
	}

	public void setFileRefByTbiIndexFileId(FileRef fileRefByTbiIndexFileId) {
		this.fileRefByTbiIndexFileId = fileRefByTbiIndexFileId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "vcf_file_id", nullable = false)
	public FileRef getFileRefByVcfFileId() {
		return this.fileRefByVcfFileId;
	}

	public void setFileRefByVcfFileId(FileRef fileRefByVcfFileId) {
		this.fileRefByVcfFileId = fileRefByVcfFileId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "bam_file_id", nullable = false)
	public FileRef getFileRefByBamFileId() {
		return this.fileRefByBamFileId;
	}

	public void setFileRefByBamFileId(FileRef fileRefByBamFileId) {
		this.fileRefByBamFileId = fileRefByBamFileId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "run_id", nullable = false)
	public Run getRun() {
		return this.run;
	}

	public void setRun(Run run) {
		this.run = run;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sample_id", nullable = false)
	public Sample getSample() {
		return this.sample;
	}

	public void setSample(Sample sample) {
		this.sample = sample;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "modified_by", nullable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "barcode", length = 45)
	public String getBarcode() {
		return this.barcode;
	}

	public void setBarcode(String barcode) {
		this.barcode = barcode;
	}

	@Column(name = "is_rerun")
	public Boolean getIsRerun() {
		return this.isRerun;
	}

	public void setIsRerun(Boolean isRerun) {
		this.isRerun = isRerun;
	}

	@Column(name = "mapped_reads")
	public Integer getMappedReads() {
		return this.mappedReads;
	}

	public void setMappedReads(Integer mappedReads) {
		this.mappedReads = mappedReads;
	}

	@Column(name = "mean_depth", precision = 12, scale = 0)
	public Float getMeanDepth() {
		return this.meanDepth;
	}

	public void setMeanDepth(Float meanDepth) {
		this.meanDepth = meanDepth;
	}

	@Column(name = "on_target", precision = 12, scale = 0)
	public Float getOnTarget() {
		return this.onTarget;
	}

	public void setOnTarget(Float onTarget) {
		this.onTarget = onTarget;
	}

	@Column(name = "uniformity", precision = 12, scale = 0)
	public Float getUniformity() {
		return this.uniformity;
	}

	public void setUniformity(Float uniformity) {
		this.uniformity = uniformity;
	}

	@Column(name = "alt_alleles")
	public Integer getAltAlleles() {
		return this.altAlleles;
	}

	public void setAltAlleles(Integer altAlleles) {
		this.altAlleles = altAlleles;
	}

	@Column(name = "polymorphic_alt_alleles")
	public Integer getPolymorphicAltAlleles() {
		return this.polymorphicAltAlleles;
	}

	public void setPolymorphicAltAlleles(Integer polymorphicAltAlleles) {
		this.polymorphicAltAlleles = polymorphicAltAlleles;
	}

	@Column(name = "qc_status", length = 19)
	public String getQcStatus() {
		return this.qcStatus;
	}

	public void setQcStatus(String qcStatus) {
		this.qcStatus = qcStatus;
	}

	@Column(name = "sample_qc_url", length = 200)
	public String getSampleQcUrl() {
		return this.sampleQcUrl;
	}

	public void setSampleQcUrl(String sampleQcUrl) {
		this.sampleQcUrl = sampleQcUrl;
	}

	@Column(name = "sample_variants_url", length = 100)
	public String getSampleVariantsUrl() {
		return this.sampleVariantsUrl;
	}

	public void setSampleVariantsUrl(String sampleVariantsUrl) {
		this.sampleVariantsUrl = sampleVariantsUrl;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_modified", length = 19)
	public Date getLastModified() {
		return this.lastModified;
	}

	public void setLastModified(Date lastModified) {
		this.lastModified = lastModified;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sampleRun")
	public Set<SampleRunLog> getSampleRunLogs() {
		return this.sampleRunLogs;
	}

	public void setSampleRunLogs(Set<SampleRunLog> sampleRunLogs) {
		this.sampleRunLogs = sampleRunLogs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sampleRun")
	public Set<BenchAnalysis> getBenchAnalysises() {
		return this.benchAnalysises;
	}

	public void setBenchAnalysises(Set<BenchAnalysis> benchAnalysises) {
		this.benchAnalysises = benchAnalysises;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sampleRun")
	public Set<SampleRunResult> getSampleRunResults() {
		return this.sampleRunResults;
	}

	public void setSampleRunResults(Set<SampleRunResult> sampleRunResults) {
		this.sampleRunResults = sampleRunResults;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sampleRun")
	public Set<SampleRunVariants> getSampleRunVariantses() {
		return this.sampleRunVariantses;
	}

	public void setSampleRunVariantses(Set<SampleRunVariants> sampleRunVariantses) {
		this.sampleRunVariantses = sampleRunVariantses;
	}

}
